
The accounts-password package contains a full system for password-based authentication. In addition to the basic username and password-based sign-in process, it also supports email-based sign-in including address verification and password recovery emails.

Unlike most web applications, the Meteor client does not send the user's password directly to the server. It uses the Secure Remote Password protocol to ensure the server never sees the user's plain-text password. This helps protect against embarrassing password leaks if the server's database is compromised.

To add password support to your application, run $ meteor add
accounts-password. You can construct your own user interface using the functions below, or use the accounts-ui package to include a turn-key user interface for password-based sign-in.










Accounts.createUser(options, [callback]) Anywhere

Create a new user.

Arguments
callback Function
Client only, optional callback. Called with no arguments on success, or with a single Error argument on failure.

Options
username String
A unique name for this user.

email String
The user's email address.

password String
The user's password. This is not sent in plain text over the wire.

profile Object
The user's profile, typically including the name field.












On the client, this function logs in as the newly created user on successful completion. On the server, it returns the newly created user id.

On the client, you must pass password and one of username or email â€” enough information for the user to be able to log in again later. On the server, you can pass any subset of these options, but the user will not be able to log in until it has an identifier and a password.

To create an account without a password on the server and still let the user pick their own password, call createUser with the email option and then call Accounts.sendEnrollmentEmail. This will send the user an email with a link to set their initial password.

By default the profile option is added directly to the new user document. To override this behavior, use Accounts.onCreateUser.

This function is only used for creating users with passwords. The external service login flows do not use this function.










Accounts.changePassword(oldPassword, newPassword, [callback]) Client

Change the current user's password. Must be logged in.

Arguments
oldPassword String
The user's current password. This is not sent in plain text over the wire.

newPassword String
A new password for the user. This is not sent in plain text over the wire.

callback Function
Optional callback. Called with no arguments on success, or with a single Error argument on failure.





















Accounts.forgotPassword(options, [callback]) Client

Request a forgot password email.

Arguments
callback Function
Optional callback. Called with no arguments on success, or with a single Error argument on failure.

Options
email String
The email address to send a password reset link.












This triggers a call to Accounts.sendResetPasswordEmail on the server. Pass the token the user receives in this email to Accounts.resetPassword to complete the password reset process.

If you are using the accounts-ui package, this is handled automatically. Otherwise, it is your responsiblity to prompt the user for the new password and call resetPassword.










Accounts.resetPassword(token, newPassword, [callback]) Client

Reset the password for a user using a token received in email. Logs the user in afterwards.

Arguments
token String
The token retrieved from the reset password URL.

newPassword String
A new password for the user. This is not sent in plain text over the wire.

callback Function
Optional callback. Called with no arguments on success, or with a single Error argument on failure.












This function accepts tokens generated by Accounts.sendResetPasswordEmail and Accounts.sendEnrollmentEmail.










Accounts.setPassword(userId, newPassword) Server

Forcibly change the password for a user.

Arguments
userId String
The id of the user to update.

newPassword String
A new password for the user.





















Accounts.verifyEmail(token, [callback]) Client

Marks the user's email address as verified. Logs the user in afterwards.

Arguments
token String
The token retrieved from the verification URL.

callback Function
Optional callback. Called with no arguments on success, or with a single Error argument on failure.












This function accepts tokens generated by Accounts.sendVerificationEmail. It sets the emails.verified field in the user record.










Accounts.sendResetPasswordEmail(userId, [email]) Server

Send an email with a link the user can use to reset their password.

Arguments
userId String
The id of the user to send email to.

email String
Optional. Which address of the user's to send the email to. This address must be in the user's emails list. Defaults to the first email in the list.












The token in this email should be passed to Accounts.resetPassword.

To customize the contents of the email, see Accounts.emailTemplates.










Accounts.sendEnrollmentEmail(userId, [email]) Server

Send an email with a link the user can use to set their initial password.

Arguments
userId String
The id of the user to send email to.

email String
Optional. Which address of the user's to send the email to. This address must be in the user's emails list. Defaults to the first email in the list.












The token in this email should be passed to Accounts.resetPassword.

To customize the contents of the email, see Accounts.emailTemplates.










Accounts.sendVerificationEmail(userId, [email]) Server

Send an email with a link the user can use verify their email address.

Arguments
userId String
The id of the user to send email to.

email String
Optional. Which address of the user's to send the email to. This address must be in the user's emails list. Defaults to the first unverified email in the list.












The token in this email should be passed to Accounts.verifyEmail.

To customize the contents of the email, see Accounts.emailTemplates.










Accounts.emailTemplates Anywhere

Options to customize emails sent from the Accounts system.












This is an Object with several fields that are used to generate text for the emails sent by sendResetPasswordEmail, sendEnrollmentEmail, and sendVerificationEmail.

Override fields of the object by assigning to them:

from: A String with an RFC5322 From address. By default, the email is sent from no-reply@meteor.com. If you wish to receive email from users asking for help with their account, be sure to set this to an email address that you can receive email at.
siteName: The public name of your application. Defaults to the DNS name of the application (eg: awesome.meteor.com).
resetPassword: An Object with two fields:
resetPassword.subject: A Function that takes a user object and returns a String for the subject line of a reset password email.
resetPassword.text: A Function that takes a user object and a url, and returns the body text for a reset password email.
enrollAccount: Same as resetPassword, but for initial password setup for new accounts.
verifyEmail: Same as resetPassword, but for verifying the users email address.


Example:

Accounts.emailTemplates.siteName = "AwesomeSite";
Accounts.emailTemplates.from = "AwesomeSite Admin <accounts@example.com>";
Accounts.emailTemplates.enrollAccount.subject = function (user) {
    return "Welcome to Awesome Town, " + user.profile.name;
};
Accounts.emailTemplates.enrollAccount.text = function (user, url) {
   return "You have been selected to participate in building a better future!"
     + " To activate your account, simply click the link below:\n\n"
     + url;
};



