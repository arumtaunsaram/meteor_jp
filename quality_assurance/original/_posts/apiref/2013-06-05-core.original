Meteor.isClient Anywhere

Boolean variable. True if running in client environment.

Meteor.isServer Anywhere

Boolean variable. True if running in server environment.

Meteor.isServer can be used to limit where code runs, but it does not prevent code from being sent to the client. Any sensitive code that you don't want served to the client, such as code containing passwords or authentication mechanisms, should be kept in the server directory.

Meteor.startup(func) Anywhere

Run code when a client or a server starts.

Arguments
func Function
A function to run on startup.

On a server, the function will run as soon as the server process is finished starting. On a client, the function will run as soon as the DOM is ready.The startup callbacks are called in the same order as the calls to Meteor.startup were made.On a client, startup callbacks from packages will be called first, followed by <body> templates from your .html files, followed by your application code.// On server startup, if the database is empty, create some initial data.
if (Meteor.isServer) {
  Meteor.startup(function () {
    if (Rooms.find().count() === 0) {
      Rooms.insert({name: "Initial room"});
    }
  });
}
Meteor.absoluteUrl([path], [options]) Anywhere

Generate an absolute URL pointing to the application. The server reads from the ROOT_URL environment variable to determine where it is running. This is taken care of automatically for apps deployed with meteor deploy, but must be provided when using meteor bundle.

Arguments
path String
A path to append to the root URL. Do not include a leading "/".

Options
secure Boolean
Create an HTTPS URL.

replaceLocalhost Boolean
Replace localhost with 127.0.0.1. Useful for services that don't recognize localhost as a domain name.

rootUrl String
Override the default ROOT_URL from the server environment. For example: "http://foo.example.com"

Meteor.settings Anywhere

Meteor.settings contains deployment-specific configuration options. You can initialize settings by passing the --settings option (which takes a file containing JSON data) to meteor run or meteor deploy, or by setting your server process's METEOR_SETTINGS environment variable to a JSON string. If you don't provide any settings, Meteor.settings will be an empty object. If the settings object contains a key named public, then Meteor.settings.public will be available on the client as well as the server. All other properties of Meteor.settings are only defined on the server.

Meteor.release Anywhere

Meteor.release is a string containing the name of the release with which the project was built (for example, "0.7.0.1"). It is undefined if the project was built using a git checkout of Meteor.


